/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.profi.mzscope.ui;

import fr.profi.mzscope.IonEntry;
import fr.profi.mzscope.IonLibrary;
import fr.proline.mzscope.model.MsnExtractionRequest;
import fr.proline.mzscope.ui.model.MzScopePreferences;
import fr.proline.mzscope.ui.IMzScopeController;
import fr.proline.mzscope.ui.IRawFileViewer;
import fr.proline.mzscope.utils.MzScopeConstants;
import fr.proline.mzscope.utils.MzScopeConstants.DisplayMode;
import fr.proline.studio.export.ExportButton;
import fr.proline.studio.filter.FilterButton;
import fr.proline.studio.markerbar.MarkerContainerPanel;
import fr.proline.studio.table.CompoundTableModel;
import fr.proline.studio.table.DecoratedMarkerTable;
import fr.proline.studio.table.TablePopupMenu;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * @author CB205360
 */
public class IonLibraryPanel extends javax.swing.JPanel {

    private final CompoundTableModel ionEntriesTableModel = new CompoundTableModel(new BeanTableModel<IonEntry>(IonEntry.class), true);
    private final CompoundTableModel peptidesTableModel = new CompoundTableModel(new BeanTableModel<IonLibrary.Peptide>(IonLibrary.Peptide.class), true);
    
    private MarkerContainerPanel ionEntriesMarkerContainerPanel;
    private MarkerContainerPanel peptidesMarkerContainerPanel;
    
    private final IonLibrary library;
    private final IMzScopeController appController;
     
    /**
     * Creates new form IonLibraryPanel
     */
    public IonLibraryPanel(IonLibrary library, IMzScopeController appController) {
        this.library = library;
        this.appController = appController;
        initComponents();
        ionEntriesMarkerContainerPanel.setMaxLineNumber(library.getNonRedondantEntries().size());
        ((BeanTableModel<IonEntry>) ionEntriesTableModel.getBaseModel()).setData(library.getEntries());
        List<IonLibrary.Peptide> peptides = new ArrayList<IonLibrary.Peptide>();
        peptidesMarkerContainerPanel.setMaxLineNumber(peptides.size());
        for (IonEntry e : library.getNonRedondantEntries()) {
            peptides.add(new IonLibrary.Peptide(e.getModification_sequence(), e.getQ1(), e.getRelative_intensity()));
        }
        ((BeanTableModel<IonLibrary.Peptide>) peptidesTableModel.getBaseModel()).setData(peptides);
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableToolbar = new javax.swing.JToolBar();
        jSplitPane1 = new javax.swing.JSplitPane();
        libraryTabbedPane = new javax.swing.JTabbedPane();
        tablePane = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        alignLibraryBtn = new javax.swing.JButton();
        extractBtn = new javax.swing.JButton();

        tableToolbar.setFloatable(false);
        tableToolbar.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tableToolbar.setRollover(true);

        jSplitPane1.setDividerLocation(130);
        jSplitPane1.setLeftComponent(libraryTabbedPane);

        tablePane.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(tablePane);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(alignLibraryBtn, org.openide.util.NbBundle.getMessage(IonLibraryPanel.class, "IonLibraryPanel.alignLibraryBtn.text")); // NOI18N
        alignLibraryBtn.setFocusable(false);
        alignLibraryBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alignLibraryBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alignLibraryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignLibraryBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(alignLibraryBtn);

        org.openide.awt.Mnemonics.setLocalizedText(extractBtn, org.openide.util.NbBundle.getMessage(IonLibraryPanel.class, "IonLibraryPanel.extractBtn.text")); // NOI18N
        extractBtn.setFocusable(false);
        extractBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        extractBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        extractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(extractBtn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        initCustomComponents();
    }// </editor-fold>//GEN-END:initComponents

    private void alignLibraryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignLibraryBtnActionPerformed
      JDialog dialog = new JDialog((JFrame)this.getTopLevelAncestor(), "Ion Library Alignment");
      dialog.setContentPane(new IonLibraryAlignementPanel(library));
      dialog.pack();
      dialog.setModal(true);
      dialog.setVisible(true);
    }//GEN-LAST:event_alignLibraryBtnActionPerformed

    private void extractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtnActionPerformed
        IRawFileViewer viewer = appController.getCurrentRawFileViewer();
        if (viewer.getCurrentRawfile().isDIAFile()) {
            DisplayMode mode = MzScopeConstants.DisplayMode.REPLACE;
            for (IonEntry ion : ((BeanTableModel<IonEntry>) ionEntriesTableModel.getBaseModel()).getData()) {
                MsnExtractionRequest.Builder builder = MsnExtractionRequest.builder();
                builder.setMz(ion.getQ1()).setFragmentMz(ion.getQ3()).setFragmentMzTolPPM(MzScopePreferences.getInstance().getFragmentMzPPMTolerance());
                viewer.extractAndDisplayChromatogram(builder.build(), mode, null);
                // then change to overlay mode for following extractions
                mode = MzScopeConstants.DisplayMode.OVERLAY;
            }
        }
    }//GEN-LAST:event_extractBtnActionPerformed

    private void initCustomComponents() {
      JScrollPane ionEntriesScrollPane = new JScrollPane();
      DecoratedMarkerTable ionEntriesTable = new DecoratedMarkerTable() {

         @Override
         public TablePopupMenu initPopupMenu() {
            return new TablePopupMenu();
         }

         @Override
         public void prepostPopupMenu() {
         }
         
         @Override
         public void addTableModelListener(TableModelListener l) {
            getModel().addTableModelListener(l);
         }
      };
      ionEntriesTable.setModel(ionEntriesTableModel);
      ionEntriesTable.getColumnExt("RT_detected").setVisible(false);      
      ionEntriesTable.getColumnExt("frg_nr").setVisible(false);
      ionEntriesTable.getColumnExt("frg_z").setVisible(false);
      ionEntriesTable.getColumnExt("n").setVisible(false);
      ionEntriesTable.getColumnExt("isotype").setVisible(false);
      ionEntriesTable.getColumnExt("rank").setVisible(false);
      ionEntriesTable.getColumnExt("score").setVisible(false);
      ionEntriesTable.getColumnExt("nterm").setVisible(false);
      ionEntriesTable.getColumnExt("cterm").setVisible(false);
      ionEntriesScrollPane.setViewportView(ionEntriesTable);
      ionEntriesTable.setFillsViewportHeight(true);
      ionEntriesTable.setViewport(ionEntriesScrollPane.getViewport());

      ExportButton exportButton = new ExportButton(ionEntriesTableModel, "Export", ionEntriesTable);
      tableToolbar.add(exportButton);
      FilterButton filterButton = new FilterButton(ionEntriesTableModel) {
         @Override
         protected void filteringDone() {         }
      };
      
      tableToolbar.add(filterButton);
      ionEntriesMarkerContainerPanel = new MarkerContainerPanel(ionEntriesScrollPane, ionEntriesTable);
      tablePane.add(tableToolbar, BorderLayout.WEST);
      tablePane.add(ionEntriesMarkerContainerPanel, BorderLayout.CENTER);

      
      JScrollPane peptidesScrollPane = new JScrollPane();
      DecoratedMarkerTable peptidesTable = new DecoratedMarkerTable() {

         @Override
         public TablePopupMenu initPopupMenu() {
            return new TablePopupMenu();
         }

         @Override
         public void prepostPopupMenu() {
         }
         
         @Override
         public void addTableModelListener(TableModelListener l) {
            getModel().addTableModelListener(l);
         }
         
         @Override
         public void valueChanged(ListSelectionEvent e) {
            super.valueChanged(e);
            int selectedRow = convertRowIndexToNonFilteredModel(this.getSelectedRow());
            List<IonLibrary.Peptide> peptides = ((BeanTableModel<IonLibrary.Peptide>) peptidesTableModel.getBaseModel()).getData();
            ((BeanTableModel<IonEntry>) ionEntriesTableModel.getBaseModel()).setData(library.getIonEntryBySequence(peptides.get(selectedRow).getSequence()));
        }
         
      };
      
      peptidesTable.setModel(peptidesTableModel);
      peptidesScrollPane.setViewportView(peptidesTable);
      peptidesTable.setFillsViewportHeight(true);
      peptidesTable.setViewport(peptidesScrollPane.getViewport());
      peptidesMarkerContainerPanel = new MarkerContainerPanel(peptidesScrollPane, peptidesTable);
      libraryTabbedPane.add("Peptides", peptidesMarkerContainerPanel);
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alignLibraryBtn;
    private javax.swing.JButton extractBtn;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTabbedPane libraryTabbedPane;
    private javax.swing.JPanel tablePane;
    private javax.swing.JToolBar tableToolbar;
    // End of variables declaration//GEN-END:variables
}
