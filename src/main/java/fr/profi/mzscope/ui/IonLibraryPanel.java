/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.profi.mzscope.ui;

import fr.proline.studio.table.BeanTableModel;
import fr.profi.mzscope.ionlibraries.IonEntry;
import fr.profi.mzscope.ionlibraries.IonLibrary;
import fr.proline.mzscope.model.MsnExtractionRequest;
import fr.proline.mzscope.ui.model.MzScopePreferences;
import fr.proline.mzscope.ui.IMzScopeController;
import fr.proline.mzscope.ui.IRawFileViewer;
import fr.proline.mzscope.utils.Display;
import fr.proline.studio.export.ExportButton;
import fr.proline.studio.filter.FilterButton;
import fr.proline.studio.markerbar.MarkerContainerPanel;
import fr.proline.studio.extendedtablemodel.CompoundTableModel;
import fr.proline.studio.graphics.marker.IntervalMarker;
import fr.proline.studio.table.DecoratedMarkerTable;
import fr.proline.studio.table.TablePopupMenu;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author CB205360
 */
public class IonLibraryPanel extends javax.swing.JPanel {

    private static final Logger logger = LoggerFactory.getLogger(IonLibraryPanel.class);
    
    private final CompoundTableModel ionEntriesTableModel = new CompoundTableModel(new BeanTableModel<IonEntry>(IonEntry.class, Arrays.asList("class", "schema")), true);
    private final CompoundTableModel peptidesTableModel = new CompoundTableModel(new BeanTableModel<IonLibrary.Peptide>(IonLibrary.Peptide.class), true);
    
    private MarkerContainerPanel ionEntriesMarkerContainerPanel;
    private MarkerContainerPanel peptidesMarkerContainerPanel;
    
    private final IonLibrary library;
    private final IMzScopeController appController;
    
    private DecoratedMarkerTable ionEntriesTable;
    private DecoratedMarkerTable peptidesTable;
    
    /**
     * Creates new form IonLibraryPanel
     */
    public IonLibraryPanel(IonLibrary library, IMzScopeController appController) {
        this.library = library;
        this.appController = appController;
        initComponents();
        ionEntriesMarkerContainerPanel.setMaxLineNumber(library.getNonRedondantEntries().size());
        ((BeanTableModel<IonEntry>) ionEntriesTableModel.getBaseModel()).setData(library.getEntries());
        List<IonLibrary.Peptide> peptides = new ArrayList<IonLibrary.Peptide>();
        for (IonEntry e : library.getNonRedondantEntries()) {
            List<IonEntry> entries = library.getIonEntryBySequence(e.getModification_sequence());
            Map<Integer, List<IonEntry>> map = entries.stream().collect(Collectors.groupingBy(IonEntry::getPrec_z));
            for (Integer charge : map.keySet()) {
                // get the first IonEntry for this charge state. TODO: a better option will be to select the most abundant fragment
                // but properties used in Peptide object are the same for each ion
                IonEntry prototype = map.get(charge).get(0);
                peptides.add(new IonLibrary.Peptide(prototype));
            }
        }
        ((BeanTableModel<IonLibrary.Peptide>) peptidesTableModel.getBaseModel()).setData(peptides);
        peptidesMarkerContainerPanel.setMaxLineNumber(peptides.size());
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        fragmentsPane = new javax.swing.JPanel();
        precursorsPane = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        alignLibraryBtn = new javax.swing.JButton();
        extractBtn = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(130);

        fragmentsPane.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(fragmentsPane);

        precursorsPane.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(precursorsPane);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(alignLibraryBtn, org.openide.util.NbBundle.getMessage(IonLibraryPanel.class, "IonLibraryPanel.alignLibraryBtn.text")); // NOI18N
        alignLibraryBtn.setFocusable(false);
        alignLibraryBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alignLibraryBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alignLibraryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignLibraryBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(alignLibraryBtn);

        org.openide.awt.Mnemonics.setLocalizedText(extractBtn, org.openide.util.NbBundle.getMessage(IonLibraryPanel.class, "IonLibraryPanel.extractBtn.text")); // NOI18N
        extractBtn.setFocusable(false);
        extractBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        extractBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        extractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(extractBtn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addContainerGap())
        );

        initCustomComponents();
    }// </editor-fold>//GEN-END:initComponents

    private void alignLibraryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignLibraryBtnActionPerformed
      JDialog dialog = new JDialog((JFrame)this.getTopLevelAncestor(), "Ion Library Alignment");
      dialog.setContentPane(new IonLibraryAlignementPanel(library));
      dialog.pack();
      dialog.setModal(true);
      dialog.setVisible(true);
    }//GEN-LAST:event_alignLibraryBtnActionPerformed

    private void extractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBtnActionPerformed
        IRawFileViewer viewer = appController.getCurrentRawFileViewer();
        if (viewer.getCurrentRawfile() != null && viewer.getCurrentRawfile().isDIAFile()) {
            String identifier = new Timestamp(System.currentTimeMillis()).toString();
            // Extract precursor mass
            int selectedPeptideRow = peptidesTable.convertRowIndexToNonFilteredModel(peptidesTable.getSelectedRow());
            if (selectedPeptideRow >= 0) {
               IonLibrary.Peptide peptide = ((BeanTableModel<IonLibrary.Peptide>) peptidesTableModel.getBaseModel()).getData().get(selectedPeptideRow);
               MsnExtractionRequest.Builder builder = MsnExtractionRequest.builder();
                    builder.setMzTolPPM(MzScopePreferences.getInstance().getMzPPMTolerance()).setMz(peptide.getQ1());
                    viewer.extractAndDisplayChromatogram(builder.build(), new Display(Display.Mode.SERIES, identifier), null);
            }
            
            // Then extract fragments (all or selected one)
            int[] selectedIonsRows = ionEntriesTable.getSelectedRows();
            List<IonEntry> entries = ((BeanTableModel<IonEntry>) ionEntriesTableModel.getBaseModel()).getData();
            IonEntry firstIon = (selectedIonsRows.length > 0) ? entries.get(ionEntriesTable.convertRowIndexToNonFilteredModel(selectedIonsRows[0])) : entries.get(0);
            Display display = new Display(Display.Mode.SERIES, Arrays.asList(new IntervalMarker(null, Color.ORANGE, Color.RED, firstIon.getRT_detected()-5.0, firstIon.getRT_detected()+5.0)), identifier);

            if (selectedIonsRows.length > 0) {
                for (int k = 0; k < selectedIonsRows.length; k++) {
                    IonEntry ion = entries.get(ionEntriesTable.convertRowIndexToNonFilteredModel(selectedIonsRows[k]));
                    MsnExtractionRequest.Builder builder = MsnExtractionRequest.builder();
                    builder.setMz(ion.getQ1()).setFragmentMz(ion.getQ3()).setFragmentMzTolPPM(MzScopePreferences.getInstance().getFragmentMzPPMTolerance());
                    viewer.extractAndDisplayChromatogram(builder.build(), display, null);
                    display = new Display(Display.Mode.SERIES, identifier);
                }
            } else {
                for (IonEntry ion : entries) {                
                    MsnExtractionRequest.Builder builder = MsnExtractionRequest.builder();
                    builder.setMz(ion.getQ1()).setFragmentMz(ion.getQ3()).setFragmentMzTolPPM(MzScopePreferences.getInstance().getFragmentMzPPMTolerance());
                    viewer.extractAndDisplayChromatogram(builder.build(), display, null);
                    // then change to overlay mode the next extractions
                    display = new Display(Display.Mode.SERIES, identifier);
                }
            }
        }
    }//GEN-LAST:event_extractBtnActionPerformed

    private void initCustomComponents() {
      JScrollPane ionEntriesScrollPane = new JScrollPane();
      ionEntriesTable = new DecoratedMarkerTable() {

         @Override
         public TablePopupMenu initPopupMenu() {
            return new TablePopupMenu();
         }

         @Override
         public void prepostPopupMenu() {
         }
         
         @Override
         public void addTableModelListener(TableModelListener l) {
            getModel().addTableModelListener(l);
         }
      };
      ionEntriesTable.setModel(ionEntriesTableModel);
      ionEntriesScrollPane.setViewportView(ionEntriesTable);
      ionEntriesTable.setFillsViewportHeight(true);
      ionEntriesTable.setViewport(ionEntriesScrollPane.getViewport());

      JToolBar toolbar = new JToolBar();
      toolbar.setFloatable(false);
      toolbar.setOrientation(javax.swing.SwingConstants.VERTICAL);
      toolbar.setRollover(true);
      
      ExportButton exportButton = new ExportButton(ionEntriesTableModel, "Export", ionEntriesTable);
      toolbar.add(exportButton);
      FilterButton filterButton = new FilterButton(ionEntriesTableModel) {
         @Override
         protected void filteringDone() {         }
      };
      
      toolbar.add(filterButton);
      ionEntriesMarkerContainerPanel = new MarkerContainerPanel(ionEntriesScrollPane, ionEntriesTable);
      fragmentsPane.add(toolbar, BorderLayout.WEST);
      fragmentsPane.add(ionEntriesMarkerContainerPanel, BorderLayout.CENTER);

      
      JScrollPane peptidesScrollPane = new JScrollPane();
      peptidesTable = new DecoratedMarkerTable() {

         @Override
         public TablePopupMenu initPopupMenu() {
            return new TablePopupMenu();
         }

         @Override
         public void prepostPopupMenu() {
         }
         
         @Override
         public void addTableModelListener(TableModelListener l) {
            getModel().addTableModelListener(l);
         }
         
         @Override
         public void valueChanged(ListSelectionEvent e) {
            super.valueChanged(e);
            int selectedRow = convertRowIndexToNonFilteredModel(this.getSelectedRow());
            if (selectedRow >= 0) {
               List<IonLibrary.Peptide> peptides = ((BeanTableModel<IonLibrary.Peptide>) peptidesTableModel.getBaseModel()).getData();
               IonLibrary.Peptide selectedPeptide = peptides.get(selectedRow);
               List<IonEntry> entries = library.getIonEntryBySequence(selectedPeptide.getSequence());
               Map<Integer, List<IonEntry>> map = entries.stream().collect(Collectors.groupingBy(IonEntry::getPrec_z));
               ((BeanTableModel<IonEntry>) ionEntriesTableModel.getBaseModel()).setData(map.get(selectedPeptide.getCharge()));
            }
        }
         
      };
      
      peptidesTable.setModel(peptidesTableModel);
      peptidesScrollPane.setViewportView(peptidesTable);
      peptidesTable.setFillsViewportHeight(true);
      peptidesTable.setViewport(peptidesScrollPane.getViewport());
      peptidesMarkerContainerPanel = new MarkerContainerPanel(peptidesScrollPane, peptidesTable);
      
      filterButton = new FilterButton(peptidesTableModel) {
         @Override
         protected void filteringDone() {         }
      };
      
      toolbar = new JToolBar();
      toolbar.setFloatable(false);
      toolbar.setOrientation(javax.swing.SwingConstants.VERTICAL);
      toolbar.setRollover(true);
      toolbar.add(filterButton);
      precursorsPane.add(toolbar, BorderLayout.WEST);
      precursorsPane.add(peptidesMarkerContainerPanel, BorderLayout.CENTER);
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alignLibraryBtn;
    private javax.swing.JButton extractBtn;
    private javax.swing.JPanel fragmentsPane;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel precursorsPane;
    // End of variables declaration//GEN-END:variables
}
