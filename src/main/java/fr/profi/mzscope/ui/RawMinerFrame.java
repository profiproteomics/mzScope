/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.profi.mzscope.ui;

import fr.profi.mzdb.model.Peakel;
import fr.profi.mzscope.ConverterManager;
import fr.profi.mzscope.InvalidMGFFormatException;
import fr.profi.mzscope.MGFReader;
import fr.profi.mzscope.MSMSSpectrum;
import fr.profi.mzscope.ionlibraries.IonEntry;
import fr.profi.mzscope.ionlibraries.IonLibrary;
import fr.profi.mzscope.ionlibraries.PeakViewEntry;
import fr.profi.mzscope.ionlibraries.SpectronautEntry;
import fr.profi.util.version.IVersion;
import fr.proline.mzscope.model.FeaturesExtractionRequest;
import fr.proline.mzscope.model.IPeakel;
import fr.proline.mzscope.model.IRawFile;
import fr.proline.mzscope.ui.BatchExtractionPanel;
import fr.proline.mzscope.ui.IRawFileViewer;
import fr.proline.mzscope.ui.dialog.ConvertRawFilesDialog;
import fr.proline.mzscope.ui.dialog.ExtractionParamsDialog;
import fr.proline.mzscope.ui.dialog.MzdbFilter;
import fr.proline.studio.Exceptions;
import fr.proline.studio.WindowManager;
import fr.proline.studio.gui.DefaultDialog;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.*;
import java.util.List;
import java.util.prefs.Preferences;


/**
 * @author CB205360
 */
public class RawMinerFrame extends JFrame {

  private final static Logger logger = LoggerFactory.getLogger(RawMinerFrame.class);
  private final static String LAST_DIR = "Last ion lib directory";

  private final RawMinerPanel rawMinerPanel;

  /**
   * Creates new form RawMinerFrame
   */
  public RawMinerFrame() {
    initComponents();
    ServiceLoader<IVersion> versionLoader = ServiceLoader.load(IVersion.class);
    Iterator<IVersion> iter = versionLoader.iterator();
    String version = "snapshot";
    while (iter.hasNext()) {
      IVersion v = iter.next();
      if (v.getModuleName().equalsIgnoreCase("mzScope")) {
        version = v.getVersion();
      }
    }
    setTitle("mzScope " + version);
    //rawFilesPanel1.setParentFrame(this);
    rawMinerPanel = new RawMinerPanel(this);
    mainPanel.add(rawMinerPanel, BorderLayout.CENTER);
    setSize(700, 500);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainPanel = new JPanel();

    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Open mzDB file");
    fileChooser.addChoosableFileFilter(new MzdbFilter());

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("mzScope");

    mainPanel.setLayout(new java.awt.BorderLayout());

    JMenu fileMenu = new JMenu("File");

    JMenuItem openRawMI = new JMenuItem("Open mzDB file ...");
    openRawMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, InputEvent.CTRL_DOWN_MASK));
    openRawMI.addActionListener(this::openRawMIActionPerformed);
    fileMenu.add(openRawMI);

    JMenuItem convertRawMI = new JMenuItem("Convert and open raw files ...");
    convertRawMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK));
    convertRawMI.addActionListener(this::convertRawMIActionPerformed);
    fileMenu.add(convertRawMI);

    fileMenu.add(new JPopupMenu.Separator());

    JMenuItem closeAllMI = new JMenuItem("Close All");
    closeAllMI.addActionListener(this::closeAllMIActionPerformed);
    fileMenu.add(closeAllMI);
    fileMenu.add(new JPopupMenu.Separator());

    JMenuItem exitMI = new JMenuItem("Exit");
    exitMI.setActionCommand("exit");
    exitMI.addActionListener(this::exitMIActionPerformed);
    fileMenu.add(exitMI);
    exitMI.getAccessibleContext().setAccessibleName("exitMenuItem");

    JMenuBar menuBar = new JMenuBar();
    menuBar.add(fileMenu);

    JMenu processMenu = new JMenu();
    extractFeaturesMI = new JMenuItem();
    detectPeakelsMI = new JMenuItem();
    JMenuItem detectFeatureMI = new JMenuItem();
    JMenuItem exportChromatogramMI = new JMenuItem();
    JMenuItem comparePeakelListMI = new JMenuItem();
    processMenu.setText("Process");

    extractFeaturesMI.setText("Extract features from MS2");
    extractFeaturesMI.setActionCommand("extractMenuItem");
    extractFeaturesMI.addActionListener(this::extractFeaturesMIActionPerformed);
    processMenu.add(extractFeaturesMI);

    detectPeakelsMI.setText("Detect Peakels");
    detectPeakelsMI.addActionListener(this::detectPeakelsMIActionPerformed);
    processMenu.add(detectPeakelsMI);

    detectFeatureMI.setText("Detect Features");
    detectFeatureMI.addActionListener(this::detectFeatureMIActionPerformed);
    processMenu.add(detectFeatureMI);

    exportChromatogramMI.setText("Export chromatogram");
    exportChromatogramMI.addActionListener(this::exportChromatogramActionPerformed);
    processMenu.add(exportChromatogramMI);
    exportChromatogramMI.getAccessibleContext().setAccessibleName("exportChromatogramItem");


    comparePeakelListMI.setText("Compare Peakel List");
    comparePeakelListMI.addActionListener(this::comparePeakelListActionPerformed);
    processMenu.add(comparePeakelListMI);


    menuBar.add(processMenu);

    JMenu toolsMenu = new JMenu("Tools");

    JMenu loadIonLibrarySubmenu = new JMenu("Load Ion Library");

    JMenuItem loadPeakViewLibraryMI = new JMenuItem("Peakview...");
    loadPeakViewLibraryMI.addActionListener(this::loadPeakViewLibraryMIActionPerformed);
    loadIonLibrarySubmenu.add(loadPeakViewLibraryMI);

    JMenuItem loadSpectronautLibraryMI = new JMenuItem("Proline/Spectronaut...");
    loadSpectronautLibraryMI.addActionListener(this::loadSpectronautLibraryMIActionPerformed);
    loadIonLibrarySubmenu.add(loadSpectronautLibraryMI);

    toolsMenu.add(loadIonLibrarySubmenu);

    JMenuItem loadMGFMI = new JMenuItem("Load MGF File ...");
    loadMGFMI.addActionListener(this::loadMGFMIActionPerformed);
    toolsMenu.add(loadMGFMI);

    JMenuItem isotopicToolMI = new JMenuItem("Isotopic Distribution ...");
    isotopicToolMI.addActionListener(this::isotopicToolActionPerformed);
    toolsMenu.add(isotopicToolMI);


    JMenuItem batchExtractionToolMI = new JMenuItem("Batch Extraction ...");
    batchExtractionToolMI.addActionListener((ActionListener) this::batchExtractionToolActionPerformed);
    toolsMenu.add(batchExtractionToolMI);

    menuBar.add(toolsMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }



  private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
    rawMinerPanel.closeAllFiles();
    System.exit(0);
  }

  private void openRawMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRawMIActionPerformed
    rawMinerPanel.openRawFile();
  }

  private void convertRawMIActionPerformed(java.awt.event.ActionEvent evt) {
    ConvertRawFilesDialog dialog = new ConvertRawFilesDialog(WindowManager.getDefault().getMainWindow());
    dialog.setVisible(true);
    if (dialog.getButtonClicked() == DefaultDialog.BUTTON_OK) {
      // retrieve parameters
      ConverterManager.getInstance().setRawMinerPanel(rawMinerPanel); //must be set first to display files !
      ConverterManager.getInstance().addFiles(dialog.getFilePaths());
      ConverterManager.setConverterExeFile(dialog.getConverterExeFile());
      ConverterManager.setConverterOption(dialog.getConverterOption());
      ConverterManager.getInstance().runConvert();
    }

  }

  private void extractFeaturesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractFeaturesMIActionPerformed
    IRawFileViewer viewer = rawMinerPanel.getMzScopePanel().getCurrentRawFileViewer();
    if (viewer != null && viewer.getCurrentRawfile() != null) {
      rawMinerPanel.getMzScopePanel().extractFeaturesFromMS2(Collections.singletonList(viewer.getCurrentRawfile()));
    }
  }//GEN-LAST:event_extractFeaturesMIActionPerformed

  private void exportChromatogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChromatogramActionPerformed
    rawMinerPanel.exportChromatogram();
  }//GEN-LAST:event_exportChromatogramActionPerformed

  private void detectPeakelsMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectPeakelsMIActionPerformed
    IRawFileViewer viewer = rawMinerPanel.getMzScopePanel().getCurrentRawFileViewer();
    if (viewer != null && viewer.getCurrentRawfile() != null) {
      rawMinerPanel.getMzScopePanel().detectPeakels(Collections.singletonList(viewer.getCurrentRawfile()));
    }

  }//GEN-LAST:event_detectPeakelsMIActionPerformed

  private void comparePeakelListActionPerformed(java.awt.event.ActionEvent evt) {

    boolean compare = false;

    IRawFileViewer viewer = rawMinerPanel.getMzScopePanel().getCurrentRawFileViewer();
    if (viewer != null) {
      List<IRawFile> rawFileList = viewer.getAllRawfiles();
      if (rawFileList != null && rawFileList.size() == 2) {
        rawMinerPanel.getMzScopePanel().comparePeakels(rawFileList);
        compare = true;
      }

    }

    if (!compare) {
      JOptionPane.showMessageDialog(this, "You can only compare Peakel lists in a view with 2 mzdb openend", "Warning", JOptionPane.INFORMATION_MESSAGE);

    }


  }

  private void closeAllMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllMIActionPerformed
    rawMinerPanel.closeAllFiles();
  }//GEN-LAST:event_closeAllMIActionPerformed

  private void detectFeatureMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectFeatureMIActionPerformed
    IRawFileViewer viewer = rawMinerPanel.getMzScopePanel().getCurrentRawFileViewer();
    if (viewer != null && viewer.getCurrentRawfile() != null) {
      rawMinerPanel.getMzScopePanel().detectFeatures(Collections.singletonList(viewer.getCurrentRawfile()));
    }
  }//GEN-LAST:event_detectFeatureMIActionPerformed


  private void loadIonLibraryMI(String dialogTitle, IonEntry prototype) {

    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle(dialogTitle);
    String directory = prefs.get(LAST_DIR, fileChooser.getCurrentDirectory().getAbsolutePath());
    fileChooser.setCurrentDirectory(new File(directory));
    fileChooser.setMultiSelectionEnabled(true);
    int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File file = fileChooser.getSelectedFile();
      IonLibrary library = IonLibrary.fromFile(file, prototype);
      prefs.put(LAST_DIR, file.getParent());
      rawMinerPanel.getMzScopePanel().addFeatureTab("Ion Lib: " + file.getName(), new IonLibraryPanel(library, rawMinerPanel.getMzScopePanel()), "");
    }

  }

  private void loadPeakViewLibraryMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPeakViewLibraryMIActionPerformed
    loadIonLibraryMI("Open PeakView Library file", new PeakViewEntry());
  }//GEN-LAST:event_loadPeakViewLibraryMIActionPerformed

  private void isotopicToolActionPerformed(java.awt.event.ActionEvent evt) {
    rawMinerPanel.getMzScopePanel().addFeatureTab("Isotopic distribution", new IsotopicToolPanel(rawMinerPanel.getMzScopePanel()), "Isotopic pattern tool");
  }

  private void batchExtractionToolActionPerformed(java.awt.event.ActionEvent evt) {
    rawMinerPanel.getMzScopePanel().addFeatureTab("Batch Extraction", new BatchExtractionPanel(rawMinerPanel.getMzScopePanel(), BatchExtractionPanel.TOOLBAR_ALIGN_VERTICAL), "Batch Extraction tool");
  }

  private void loadMGFMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMGFMIActionPerformed
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Open MGF file");
    String directory = prefs.get(LAST_DIR, fileChooser.getCurrentDirectory().getAbsolutePath());
    fileChooser.setCurrentDirectory(new File(directory));
    fileChooser.setMultiSelectionEnabled(true);
    int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      try {
        File file = fileChooser.getSelectedFile();
        MGFReader reader = new MGFReader();
        List<MSMSSpectrum> peakList = reader.read(file);
        String title = "MGF file " + file.getName();
        rawMinerPanel.getMzScopePanel().addFeatureTab(title, new MGFPanel(peakList, rawMinerPanel.getMzScopePanel()), "Spectra loaded from " + title);
        prefs.put(LAST_DIR, file.getParent());
      } catch (InvalidMGFFormatException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }//GEN-LAST:event_loadMGFMIActionPerformed

  private void loadSpectronautLibraryMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSpectronautLibraryMIActionPerformed
    loadIonLibraryMI("Open Spectronaut Library file", new SpectronautEntry());
  }//GEN-LAST:event_loadSpectronautLibraryMIActionPerformed


  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
//         javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.fast.FastLookAndFeel");
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Windows".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
        }
      }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
             javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(RawMinerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new RawMinerFrame().setVisible(true);
      }
    });
  }

  private javax.swing.JMenuItem detectPeakelsMI;
  private javax.swing.JMenuItem extractFeaturesMI;

  private javax.swing.JMenuItem experimentalMI;
  private javax.swing.JPanel mainPanel;


  public void setExtractFeaturesMIEnabled(boolean extractFeatures) {
    extractFeaturesMI.setEnabled(extractFeatures);
  }

  public void setDetectPeakelsMIEnabled(boolean detectPeakels) {
    detectPeakelsMI.setEnabled(detectPeakels);
  }

}

