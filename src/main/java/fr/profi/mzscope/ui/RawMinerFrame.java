/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.profi.mzscope.ui;

import fr.proline.mzscope.ui.MzdbFilter;
import java.awt.BorderLayout;
import javax.swing.JFrame;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author CB205360
 */
public class RawMinerFrame extends JFrame {

   final private static Logger logger = LoggerFactory.getLogger(RawMinerFrame.class);
   
   private final RawMinerPanel rawMinerPanel;

   /**
    * Creates new form RawMinerFrame
    */
   public RawMinerFrame() {
      initComponents();
      //rawFilesPanel1.setParentFrame(this);
      rawMinerPanel = new RawMinerPanel(this);
      mainPanel.add(rawMinerPanel, BorderLayout.CENTER);
      setSize(700,500);
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
    * content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        openRawMI = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        closeAllMI = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMI = new javax.swing.JMenuItem();
        ProcessMenu = new javax.swing.JMenu();
        extractFeaturesMI = new javax.swing.JMenuItem();
        detectPeakelsMI = new javax.swing.JMenuItem();
        exportChromatogram = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Open Raw file");
        fileChooser.addChoosableFileFilter(new MzdbFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("mzScope");

        mainPanel.setLayout(new java.awt.BorderLayout());

        FileMenu.setText("File");

        openRawMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openRawMI.setText("Open Rawfile ...");
        openRawMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRawMIActionPerformed(evt);
            }
        });
        FileMenu.add(openRawMI);
        FileMenu.add(jSeparator1);

        closeAllMI.setText("Close All");
        closeAllMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllMIActionPerformed(evt);
            }
        });
        FileMenu.add(closeAllMI);
        FileMenu.add(jSeparator2);

        exitMI.setText("Exit");
        exitMI.setActionCommand("exit");
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        FileMenu.add(exitMI);
        exitMI.getAccessibleContext().setAccessibleName("exitMenuItem");

        menuBar.add(FileMenu);

        ProcessMenu.setText("Process");

        extractFeaturesMI.setText("Extract features");
        extractFeaturesMI.setActionCommand("extractMenuItem");
        extractFeaturesMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractFeaturesMIActionPerformed(evt);
            }
        });
        ProcessMenu.add(extractFeaturesMI);

        detectPeakelsMI.setText("Detect Peakels");
        detectPeakelsMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectPeakelsMIActionPerformed(evt);
            }
        });
        ProcessMenu.add(detectPeakelsMI);

        exportChromatogram.setText("Export chromatogram");
        exportChromatogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportChromatogramActionPerformed(evt);
            }
        });
        ProcessMenu.add(exportChromatogram);
        exportChromatogram.getAccessibleContext().setAccessibleName("exportChromatogramItem");

        menuBar.add(ProcessMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
       System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void openRawMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRawMIActionPerformed
       rawMinerPanel.openRawMI();
    }//GEN-LAST:event_openRawMIActionPerformed

        
    private void extractFeaturesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractFeaturesMIActionPerformed
       rawMinerPanel.extractFeaturesMI();
    }//GEN-LAST:event_extractFeaturesMIActionPerformed

   private void exportChromatogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChromatogramActionPerformed
      rawMinerPanel.exportChromatogram();
   }//GEN-LAST:event_exportChromatogramActionPerformed

   private void detectPeakelsMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectPeakelsMIActionPerformed
      rawMinerPanel.detectPeakelsMI();
   }//GEN-LAST:event_detectPeakelsMIActionPerformed

    private void closeAllMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllMIActionPerformed
        rawMinerPanel.closeAllRaw();
    }//GEN-LAST:event_closeAllMIActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
//         javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.fast.FastLookAndFeel");
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Windows".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
            }
         }
      } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(RawMinerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
       //</editor-fold>
       
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new RawMinerFrame().setVisible(true);
         }
      });
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu ProcessMenu;
    private javax.swing.JMenuItem closeAllMI;
    private javax.swing.JMenuItem detectPeakelsMI;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JMenuItem exportChromatogram;
    private javax.swing.JMenuItem extractFeaturesMI;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openRawMI;
    // End of variables declaration//GEN-END:variables


    public void setExtractFeaturesMIEnabled(boolean extractFeatures){
        extractFeaturesMI.setEnabled(extractFeatures);
    }
    
    public void setDetectPeakelsMIEnabled(boolean detectPeakels){
        detectPeakelsMI.setEnabled(detectPeakels);
    }
}

