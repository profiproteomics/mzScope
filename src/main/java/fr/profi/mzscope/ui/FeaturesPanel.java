/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package fr.profi.mzscope.ui;

import fr.profi.mzdb.model.Feature;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.event.RowSorterEvent;
import javax.swing.event.RowSorterListener;
import javax.swing.table.TableColumnModel;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.renderer.DefaultTableRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 *
 * @author CB205360
 */
public class FeaturesPanel extends javax.swing.JPanel implements RowSorterListener {

   final private static Logger logger = LoggerFactory.getLogger(FeaturesPanel.class);
   
   private IRawFilePlot rawFilePanel;
   private List<Feature> features = new ArrayList<Feature>();
   private int modelSelectedIdxBeforeSort = -1;
   /**
    * Creates new form FeaturesTable
    */
   public FeaturesPanel() {
      initComponents();
   }

   public FeaturesPanel(IRawFilePlot rawFilePanel) {
      this.rawFilePanel = rawFilePanel;
      initComponents();
      featureTable.getRowSorter().addRowSorterListener(this);
      TableColumnModel columnModel = featureTable.getColumnModel();
      for( int k = 0; k < columnModel.getColumnCount(); k++) { 
         switch(FeaturesTableModel.Columns.values()[k]) {
            case MZ_COL: 
               columnModel.getColumn(k).setCellRenderer(new DefaultTableRenderer(new NumberFormatter("#.0000"), JLabel.RIGHT));
               break;
            case ET_COL: 
            case DURATION_COL: 
               columnModel.getColumn(k).setCellRenderer(new DefaultTableRenderer(new NumberFormatter("#0.00"), JLabel.RIGHT));   
               break;
            case APEX_INT_COL:
            case AREA_COL: columnModel.getColumn(k).setCellRenderer(new DefaultTableRenderer(new NumberFormatter("#,###,###"), JLabel.RIGHT));
               break;
         }
      }
   }
   
 
   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
    * content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      featureTableModel = new fr.profi.mzscope.ui.FeaturesTableModel();
      jScrollPane1 = new javax.swing.JScrollPane();
      featureTable = new org.jdesktop.swingx.JXTable();

      featureTable.setModel(featureTableModel);
      featureTable.setColumnControlVisible(true);
      featureTable.setEditable(false);
      featureTable.setShowGrid(true);
      featureTable.setShowHorizontalLines(false);
      featureTable.addHighlighter(HighlighterFactory.createSimpleStriping());
      featureTable.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            featureTableMouseClicked(evt);
         }
      });
      jScrollPane1.setViewportView(featureTable);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

   private void featureTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_featureTableMouseClicked
      if ((features != null) && (!features.isEmpty()) && (rawFilePanel != null) 
              && (evt.getClickCount() == 2) && (featureTable.getSelectedRow() != -1)) {
         Feature f = features.get(featureTable.convertRowIndexToModel(featureTable.getSelectedRow()));
         rawFilePanel.displayFeature(f);
         //propertySheetPanel.setBean(f); // TODO
      }
   }//GEN-LAST:event_featureTableMouseClicked


   public void setFeatures(List<Feature> features) {
      featureTableModel.setFeatures(features);
      this.features = features;
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private org.jdesktop.swingx.JXTable featureTable;
   private fr.profi.mzscope.ui.FeaturesTableModel featureTableModel;
   private javax.swing.JScrollPane jScrollPane1;
   // End of variables declaration//GEN-END:variables

   @Override
   public void sorterChanged(RowSorterEvent e) {
      if(featureTable.getSelectedRow() == -1)
         return;
      if (e.getType() == RowSorterEvent.Type.SORT_ORDER_CHANGED) {
         modelSelectedIdxBeforeSort = featureTable.convertRowIndexToModel(featureTable.getSelectedRow());
      } else if (modelSelectedIdxBeforeSort != -1) {
         int idx = featureTable.convertRowIndexToView(modelSelectedIdxBeforeSort);
          featureTable.scrollRectToVisible(new Rectangle(featureTable.getCellRect(idx, 0, true)));
      }
   }
}

class NumberFormatter implements StringValue {

   private DecimalFormat format;
   
   public NumberFormatter(String pattern) {
      this.format = new DecimalFormat(pattern);
   }
   
   @Override
   public String getString(Object value) {
      if (value == null) {
         return "";
      }
      try {
         return format.format(value);
      } catch (IllegalArgumentException e) {
         // didn't work, nothing we can do
      }
      return value.toString();
   }

}

