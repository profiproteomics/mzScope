/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.profi.mzscope.ui;

import fr.profi.mzscope.MSMSSpectrum;
import fr.profi.mzscope.Peak;
import fr.proline.mzscope.model.MsnExtractionRequest;
import fr.proline.mzscope.model.Spectrum;
import fr.proline.mzscope.ui.IMzScopeController;
import fr.proline.mzscope.ui.IRawFileViewer;
import fr.proline.mzscope.ui.model.MzScopePreferences;
import fr.proline.mzscope.utils.Display;
import fr.proline.studio.export.ExportButton;
import fr.proline.studio.extendedtablemodel.CompoundTableModel;
import fr.proline.studio.filter.FilterButton;
import fr.proline.studio.markerbar.MarkerContainerPanel;
import fr.proline.studio.table.BeanTableModel;
import fr.proline.studio.table.DecoratedMarkerTable;
import fr.proline.studio.table.TablePopupMenu;
import fr.proline.studio.utils.StudioResourceBundle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelListener;
import java.awt.*;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

/**
 * @author CB205360
 */
public class MGFPanel extends javax.swing.JPanel {

  private static final Logger logger = LoggerFactory.getLogger(MGFPanel.class);

  protected final CompoundTableModel peaksTableModel = new CompoundTableModel(new BeanTableModel<Peak>(Peak.class), true);
  protected final CompoundTableModel spectrumTableModel = new CompoundTableModel(new BeanTableModel<MSMSSpectrum>(MSMSSpectrum.class), true);

  protected MarkerContainerPanel peaksMarkerContainerPanel;
  protected MarkerContainerPanel spectrumMarkerContainerPanel;

  protected final IMzScopeController appController;

  protected DecoratedMarkerTable peaksTable;
  protected DecoratedMarkerTable spectrumTable;
  protected javax.swing.JTabbedPane libraryTabbedPane;
  protected javax.swing.JPanel tablePane;
  protected javax.swing.JToolBar tableToolbar;

  /**
   * Creates new form IonLibraryPanel
   */
  public MGFPanel(List<MSMSSpectrum> spectrum, IMzScopeController appController) {
    this.appController = appController;
    initComponents();
    spectrumMarkerContainerPanel.setMaxLineNumber(spectrum.size());
    ((BeanTableModel<MSMSSpectrum>) spectrumTableModel.getBaseModel()).setData(spectrum);

  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {

    JToolBar panelToolBar = getToolbar();
    tableToolbar = new JToolBar();
    JSplitPane jSplitPane1 = new JSplitPane();
    libraryTabbedPane = new JTabbedPane();
    tablePane = new JPanel();

    tableToolbar.setFloatable(false);
    tableToolbar.setOrientation(javax.swing.SwingConstants.VERTICAL);
    tableToolbar.setRollover(true);

    jSplitPane1.setDividerLocation(130);
    jSplitPane1.setLeftComponent(libraryTabbedPane);

    tablePane.setLayout(new java.awt.BorderLayout());
    jSplitPane1.setRightComponent(tablePane);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSplitPane1)
                                    .addComponent(panelToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                            .addContainerGap())
    );

    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(panelToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addContainerGap())
    );

    initCustomComponents();
  }

  protected JToolBar getToolbar() {

    JToolBar jToolBar1 = new JToolBar();
    JButton extractBtn = new JButton();
    JButton displayBtn = new JButton();

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    extractBtn.setText(StudioResourceBundle.getMessage(MGFPanel.class, "MGFPanel.extractBtn.text"));
    extractBtn.setToolTipText(StudioResourceBundle.getMessage(MGFPanel.class, "MGFPanel.extractBtn.tooltip"));
    extractBtn.setFocusable(false);
    extractBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    extractBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    extractBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        extractBtnActionPerformed(evt);
      }
    });
    jToolBar1.add(extractBtn);

    displayBtn.setText(StudioResourceBundle.getMessage(MGFPanel.class, "MGFPanel.displayBtn.text"));
    displayBtn.setToolTipText(StudioResourceBundle.getMessage(MGFPanel.class, "MGFPanel.displayBtn.tooltip"));
    displayBtn.setFocusable(false);
    displayBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    displayBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    displayBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        displayBtnActionPerformed(evt);
      }
    });
    jToolBar1.add(displayBtn);
    return jToolBar1;
  }

  protected void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {

    int selectedRow = spectrumTable.convertRowIndexToNonFilteredModel(spectrumTable.getSelectedRow());
    if (selectedRow >= 0) {
      MSMSSpectrum spectrum = ((BeanTableModel<MSMSSpectrum>) spectrumTableModel.getBaseModel()).getData().get(selectedRow);
      IRawFileViewer viewer = appController.getCurrentRawFileViewer();
      double[] intensities = spectrum.getIntensityValues();
      float[] fIntensities = new float[intensities.length];
      for (int k = 0; k < intensities.length; k++) {
        fIntensities[k] = (float)intensities[k];
      }
      Spectrum mzScopeSpectrum = new Spectrum(-1, (float)spectrum.getRetentionTime(), spectrum.getMassValues(), fIntensities, 1, Spectrum.ScanType.CENTROID);
      double maxMgfIntensity = Arrays.stream(intensities).max().getAsDouble();
      float[] currentIntensities = viewer.getCurrentSpectrum().getIntensities();
      double maxCurrentIntensity = IntStream.range(0, currentIntensities.length).mapToDouble(i -> currentIntensities[i]).max().getAsDouble();
      viewer.setReferenceSpectrum(mzScopeSpectrum, (float)(-maxCurrentIntensity/maxMgfIntensity));
    }
  }

  protected void extractBtnActionPerformed(java.awt.event.ActionEvent evt) {
    IRawFileViewer viewer = appController.getCurrentRawFileViewer();

    String identifier = new Timestamp(System.currentTimeMillis()).toString();
    Display display = new Display(Display.Mode.SERIES, identifier);
    int selectedRow = spectrumTable.convertRowIndexToNonFilteredModel(spectrumTable.getSelectedRow());
    if (selectedRow >= 0) {
      // extract the MS2 spectrum precursor mz
      MSMSSpectrum spectrum = ((BeanTableModel<MSMSSpectrum>) spectrumTableModel.getBaseModel()).getData().get(selectedRow);
      MsnExtractionRequest.Builder builder = MsnExtractionRequest.builder();
      builder.setMzTolPPM(MzScopePreferences.getInstance().getMzPPMTolerance()).setMz(spectrum.getPrecursorMz());
      viewer.extractAndDisplayChromatogram(builder.build(), display, null);
    }

    if (viewer.getCurrentRawfile().isDIAFile()) {
      int[] selectedRows = peaksTable.getSelectedRows();
      List<Peak> entries = ((BeanTableModel<Peak>) peaksTableModel.getBaseModel()).getData();
      if (selectedRows.length > 0) {
        // extract selected fragments
        for (int k = 0; k < selectedRows.length; k++) {
          Peak peak = entries.get(peaksTable.convertRowIndexToNonFilteredModel(selectedRows[k]));
          MsnExtractionRequest.Builder builder = MsnExtractionRequest.builder();
          builder.setMzTolPPM(MzScopePreferences.getInstance().getMzPPMTolerance());
          builder.setMz(peak.getSpectrum().getPrecursorMz()).setFragmentMz(peak.getMz()).setFragmentMzTolPPM(MzScopePreferences.getInstance().getFragmentMzPPMTolerance());
          viewer.extractAndDisplayChromatogram(builder.build(), display, null);
        }
      }
    }
  }

  private void initCustomComponents() {
    JScrollPane peaksScrollPane = new JScrollPane();
    peaksTable = new DecoratedMarkerTable() {

      @Override
      public TablePopupMenu initPopupMenu() {
        return new TablePopupMenu();
      }

      @Override
      public void prepostPopupMenu() {
      }

      @Override
      public void addTableModelListener(TableModelListener l) {
        getModel().addTableModelListener(l);
      }
    };
    peaksTable.setModel(peaksTableModel);
    peaksTable.getColumnExt("charge").setVisible(false);
    peaksTable.getColumnExt("spectrum").setVisible(false);

    peaksScrollPane.setViewportView(peaksTable);
    peaksTable.setFillsViewportHeight(true);
    peaksTable.setViewport(peaksScrollPane.getViewport());

    ExportButton exportButton = new ExportButton(peaksTableModel, "Export", peaksTable);
    tableToolbar.add(exportButton);
    FilterButton filterButton = new FilterButton(peaksTableModel) {
      @Override
      protected void filteringDone() {
      }
    };

    tableToolbar.add(filterButton);
    peaksMarkerContainerPanel = new MarkerContainerPanel(peaksScrollPane, peaksTable);
    JLabel label = new JLabel("Fragments");
    label.setBorder(new EmptyBorder(3, 10, 5, 10));
    tablePane.add(label, BorderLayout.NORTH);
    tablePane.add(tableToolbar, BorderLayout.WEST);
    tablePane.add(peaksMarkerContainerPanel, BorderLayout.CENTER);


    JScrollPane spectrumScrollPane = new JScrollPane();
    spectrumTable = new DecoratedMarkerTable() {

      @Override
      public TablePopupMenu initPopupMenu() {
        return new TablePopupMenu();
      }

      @Override
      public void prepostPopupMenu() {
      }

      @Override
      public void addTableModelListener(TableModelListener l) {
        getModel().addTableModelListener(l);
      }

      @Override
      public void valueChanged(ListSelectionEvent e) {
        super.valueChanged(e);
        int selectedRow = convertRowIndexToNonFilteredModel(this.getSelectedRow());
        if (selectedRow >= 0) {
          List<MSMSSpectrum> spectrum = ((BeanTableModel<MSMSSpectrum>) spectrumTableModel.getBaseModel()).getData();
          ((BeanTableModel<Peak>) peaksTableModel.getBaseModel()).setData(spectrum.get(selectedRow).getPeaks());
        }
      }

    };

    spectrumTable.setModel(spectrumTableModel);
    spectrumTable.getColumnExt("annotations").setVisible(false);
    spectrumTable.getColumnExt("peaks").setVisible(false);
    spectrumTable.getColumnExt("massValues").setVisible(false);
    spectrumTable.getColumnExt("intensityValues").setVisible(false);

    spectrumScrollPane.setViewportView(spectrumTable);
    spectrumTable.setFillsViewportHeight(true);
    spectrumTable.setViewport(spectrumScrollPane.getViewport());
    spectrumMarkerContainerPanel = new MarkerContainerPanel(spectrumScrollPane, spectrumTable);
    libraryTabbedPane.add("Precursor list", spectrumMarkerContainerPanel);

  }

}
